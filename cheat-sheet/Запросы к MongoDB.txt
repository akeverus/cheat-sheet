Максимальное значение по полю:
db.getSiblingDB("ervk_core").getCollection("supervision").find({}).sort({"number" : -1}).limit(1)

Поиск NOT NULL значений:
db.getSiblingDB("ervk_core").getCollection("supervision").find({"info.parentId":{$ne:null}});

Поиск по ID:
db.getSiblingDB("ervk_core").getCollection("supervision").find({"_id":ObjectId("60cb21027c0af558db2a148c")});

Выдача в ответ только нескольких полей:
db.getSiblingDB("ervk_core").getCollection("supervision").find({"status": "DEPRECATED"}, {versionStartDate: 1, status: 1, previousVersionId: 1, versionFinishDate: 1, slug: 1});

Изменение всех элементов массива:
db.getSiblingDB("ervk_core").getCollection("supervision").updateMany(
    {
        "methods.subcategories.actions": {
            $exists: true
        }
    },
    {
        "$set": {
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem1]._id": "0af4cd2e-78cb-109b-8178-d5a7ba0e0012",
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem2]._id": "0af4cd2e-78cb-109b-8178-d5a7ba0e0014",
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem3]._id": "0af4cd2e-78cb-109b-8178-d5a7ba0e0016",
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem4]._id": "0af4cd2e-78cb-109b-8178-d5a7ba0e0018",
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem5]._id": "0af4cd2e-78cb-109b-8178-d5a7ba0e001a",
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem6]._id": "0af4cd2e-78cb-109b-8178-d5a7ba0e001c",
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem7]._id": "0af4cd2e-78cb-109b-8178-d5a7ba0e001e",
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem8]._id": "0af4cd2e-78cb-109b-8178-d5a7ba260020",
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem9]._id": "0af4cd2e-78cb-109b-8178-d5a7ba260022",
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem10]._id": "0af4cd2e-78cb-109b-8178-d5a7ba2d0024",
            "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem11]._id": "3b7205c1-8282-4b63-8121-b82aacd7ca67",
        }
    },
    {
        "arrayFilters": [
            {
              "methodElem.subcategories": {
                $exists: true
              }
            },
            {
              "subcatElem.actions": {
                $exists: true
              }
            },
            {
                "elem1.title": "Осмотр",
            },
            {
                "elem2.title": "Досмотр",
            },
            {
                "elem3.title": "Опрос",
            },
            {
                "elem4.title": "Получение письменных объяснений",
            },
            {
                "elem5.title": "Истребование документов",
            },
            {
                "elem6.title": "Отбор проб (образцов)",
            },
            {
                "elem7.title": "Инструментальное обследование",
            },
            {
                "elem8.title": "Испытание",
            },
            {
                "elem9.title": "Экспертиза",
            },
            {
                "elem10.title": "Эксперимент",
            },
            {
                "elem11.title": "Истребование документов, которые в соответствии с обязательными требованиями должны находиться в месте нахождения (осуществления деятельности) контролируемого лица (его филиалов, представительств, обособленных структурных подразделений) либо объекта контроля",
            }
        ]
    }
);

Изменение всех элементов массива(2):

db.getSiblingDB("ervk_core").getCollection("supervision").updateMany(
      {
          "methods.subcategories.actions": {
              $exists: true
          }
      },
      {
          "$set": {
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem1]": {"_id": "0af4cd2e-78cb-109b-8178-d5a7ba0e0012", "title": "Осмотр", "code": 1},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem2]": {"_id": "0af4cd2e-78cb-109b-8178-d5a7ba130014", "title": "Досмотр", "code": 2},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem3]": {"_id": "0af4cd2e-78cb-109b-8178-d5a7ba170016", "title": "Опрос", "code": 3},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem4]": {"_id": "0af4cd2e-78cb-109b-8178-d5a7ba1b0018", "title": "Получение письменных объяснений", "code": 4},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem5]": {"_id": "0af4cd2e-78cb-109b-8178-d5a7ba1e001a", "title": "Истребование документов", "code": 5},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem6]": {"_id": "0af4cd2e-78cb-109b-8178-d5a7ba21001c", "title": "Отбор проб (образцов)", "code": 6},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem7]": {"_id": "0af4cd2e-78cb-109b-8178-d5a7ba23001e", "title": "Инструментальное обследование", "code": 7},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem8]": {"_id": "0af4cd2e-78cb-109b-8178-d5a7ba260020", "title": "Испытание", "code": 8},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem9]": {"_id": "0af4cd2e-78cb-109b-8178-d5a7ba2b0022", "title": "Экспертиза", "code": 9},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem10]": {"_id": "0af4cd2e-78cb-109b-8178-d5a7ba2d0024", "title": "Эксперимент", "code": 10},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem11]": {"_id": "3b7205c1-8282-4b63-8121-b82aacd7ca67", "title": "Истребование документов, которые в соответствии с обязательными требованиями должны находиться в месте нахождения (осуществления деятельности) контролируемого лица (его филиалов, представительств, обособленных структурных подразделений) либо объекта контроля", "code": 11},
              "methods.$[methodElem].subcategories.$[subcatElem].actions.$[elem12]": {"_id": "87112b5f-3d8d-4aae-b1de-7e668e84ebd1", "title": "Осуществляется без действия", "code": 12}
          }
      },
      {
          "arrayFilters": [
              {
                "methodElem.subcategories": {
                  $exists: true
                }
              },
              {
                "subcatElem.actions": {
                  $exists: true
                }
              },
               {
                  "elem1.title": "Осмотр",
              },
              {
                  "elem2.title": "Досмотр",
              },
              {
                  "elem3.title": "Опрос",
              },
              {
                  "elem4.title": "Получение письменных объяснений",
              },
              {
                  "elem5.title": "Истребование документов",
              },
              {
                  "elem6.title": "Отбор проб (образцов)",
              },
              {
                  "elem7.title": "Инструментальное обследование",
              },
              {
                  "elem8.title": "Испытание",
              },
              {
                  "elem9.title": "Экспертиза",
              },
              {
                  "elem10.title": "Эксперимент",
              },
              {
                  "elem11.title": "Истребование документов, которые в соответствии с обязательными требованиями должны находиться в месте нахождения (осуществления деятельности) контролируемого лица (его филиалов, представительств, обособленных структурных подразделений) либо объекта контроля",
              },
              {
                  "elem12.title": "Осуществляется без действия"
              }
          ]
      }
);

Изменение и поиск по дате:

db.getSiblingDB("ervk_core").getCollection("supervision").updateMany(
{},
[
  {
    $set: {
      "info.startDate": {
        $cond: [
          {
            $ne: [
              {
                $hour: "$info.startDate"
              },
              0
            ]
          },
          {
            $dateFromParts: {
              "year": {
                $year: {
                  $add: [
                    "$info.startDate",
                    86400000
                  ]
                }
              },
              "month": {
                $month: {
                  $add: [
                    "$info.startDate",
                    86400000
                  ]
                }
              },
              "day": {
                $dayOfMonth: {
                  $add: [
                    "$info.startDate",
                    86400000
                  ]
                }
              },
              "hour": 0,
              "minute": 0,
              "second": 0,
              "millisecond": 0,

            }
          },
          "$info.startDate"
        ]
      }
    }
  }
])

Копирование элементов массива в новый массив при помощи JS:

db.getSiblingDB("ervk_core").getCollection("supervision").find({}).forEach(function (supervision) {
    if (supervision.methods instanceof Array) {
        supervision.methods.forEach(function (method) {
            var linkToRegistry = []
            if (method.settings instanceof Array) {

                method.settings.forEach(function (setting) {
                    linkToRegistry.push(setting.linkToRegistry);
                });

                db.getSiblingDB("ervk_core").getCollection("supervision").updateOne(
                    {
                      _id: supervision._id,
                      methods: method
                    },
                    {
                      '$set':
                      {
                         [`methods.$.linkToRegistry`] : linkToRegistry
                      }
                    }
                );
            }
        });
    }
});

Добавление элемента в массив по двум условиям:

db.getSiblingDB("ervk_core").getCollection("supervision").updateMany(
    {
        "methods.category": {
            $eq: "Контрольные (надзорные) мероприятия"
        },
        "methods.subcategories.actions": {
            $exists: true
        }
    },
    {
        "$push": {
            "methods.$[methodElem].subcategories.$[subcatElem].actions": {
                "_id": "87112b5f-3d8d-4aae-b1de-7e668e84ebd1",
               "title": "Осуществляется без действия"
           }
        }
    },
    {
        "arrayFilters": [
            {
              "methodElem.subcategories": {
                $exists: true
              }
            },
            {
              "subcatElem.title": {
                $eq: "Документарная проверка"
              }
            }
        ]
    }
);

Автоматическая генерация UUID в элементы массива с try-catch:

db.getSiblingDB("ervk_core").getCollection("supervision").find(
    {
        "authorities.risks.indicators": {
            $exists: true,
            $ne: []
        }
    }
).forEach(function (supervision) {
    try {
        if (supervision.authorities instanceof Array) {
            supervision.authorities.forEach(function (authority) {
                if (authority.risks != null) {
                    if (authority.risks.indicators instanceof Array) {
                        authority.risks.indicators.forEach(function (indicate) {
                            if (indicate.targetId == null) {
                                db.getSiblingDB("ervk_core").getCollection("supervision").updateOne(
                                    {
                                        "_id": supervision._id,
                                        "authorities.risks.indicators": {
                                            $exists: true,
                                            $ne: []
                                        }
                                    },
                                    {
                                       $set: {
                                            "authorities.$[authority].risks.indicators.$[indicator].targetId": String(UUID())
                                       }
                                    },
                                    {
                                        "arrayFilters": [
                                            {
                                              "authority.ogrn": {
                                                $exists: true,
                                                $eq: authority.ogrn
                                              }
                                            },
                                            {
                                              "indicator.recordId": {
                                                $exists: true,
                                                $eq: indicate.recordId
                                               }
                                            }
                                        ]
                                    }
                                )
                            }
                        });
                    }
                }
            });
        }
    } catch (err) {
        print(supervision.slug)
    }
});

Запрос с использованием функции JS:

let slugs = [553, 887]
let actuals = []
function getActual(id){
    let answer = {}
    let supervisions = db.supervision.find({previousVersionId:id})
    supervisions.forEach(function(s){
        answer = s.slug
    })
    return answer
}
slugs.forEach(function(slug){
    let supervision = db.supervision.findOne({slug:slug})
    let actual_slug = 0
    if (supervision.status == 'DEPRECATED'){
        actual_slug = getActual(String(supervision._id))
    }
    else if (supervision.status == 'NOT_MODERATION_PUBLISHED' || supervision.status == 'ARCHIVE'){
        actual_slug = slug
    }
    else {
       aclual_slug = 'NOT ACTUAL'
    }
    actuals.push({old:slug, new:actual_slug})
})

Запрос по добавление элемента в массив с условием, что в нём есть определенный элемент:

db.getSiblingDB("ervk_core").getCollection("supervision").find({}).forEach(function (supervision) {
    if (supervision.info.targetEntities instanceof Array) {
        supervision.info.targetEntities.forEach (function (targetEntity) {
            if (targetEntity.title == "Физические лица") {
                db.getSiblingDB("ervk_core").getCollection("supervision").updateOne(
                    {
                      "_id": supervision._id
                    },
                    {
                      "$push":
                          {
                             "info.targetEntities" : {"code": "5", "recordId": "db2f27eb-9ece-47dc-978d-0de87793fcde", "title": "Иностранные физические лица"}
                          }
                    }
                );
            }
            if (targetEntity.title == "Юридические лица") {
                db.getSiblingDB("ervk_core").getCollection("supervision").updateOne(
                    {
                      "_id": supervision._id
                    },
                    {
                      "$push":
                          {
                             "info.targetEntities" : {"code": "4", "recordId": "3f4e8fdd-4334-4850-ba6d-3e043e98b5ce", "title": "Иностранные юридические лица"}
                          }
                    }
                );
            }
        });
    }
});

Запрос на обновление статус, версий и дат ВК по парам:

var oldSlugs = [437, 553, 887, 1022, 1023, 1043, 1059, 1062, 1063, 1115, 1203, 1556, 1645, 1662, 1701, 1821, 1823, 1960, 1964, 2053, 2062, 2167, 2169, 2199, 2265, 2288, 2788, 2832, 2848, 2851, 3202, 3212, 3222, 3225, 3315, 3350, 3490, 3591, 3637, 91106, 3700, 3797, 3815, 3968, 4007, 4059, 4088, 4097, 4106, 4112, 4115, 4118, 4279, 4415, 4526, 4676, 4802, 4805, 4810, 4852, 4874, 4891, 4966, 4987, 5137, 5353, 5372, 5453, 5472, 5538, 5631, 5649, 5679, 5681, 75984, 5813, 5856, 5870, 5877, 5936, 5965, 37837, 6143, 6350, 6378, 6416, 6586, 92487, 7059, 86923, 7608, 7897, 74148, 8231, 8240, 8241, 8263, 8270, 8357, 8400, 74822, 8603, 8680, 68278, 8951, 8985, 9216, 9270, 9344, 9512, 9564, 9573, 9611, 89137, 9786, 36885, 9810, 9842, 9854, 36896, 9975, 10284, 10357, 83879, 10524, 10544, 11005, 11038, 11141, 88958, 11339, 11433, 11473, 11476, 11483, 11523, 11622, 11623, 11769, 77348, 12129, 12143, 12336, 12455, 12653, 90919, 12994, 51884, 13477, 13495, 13869, 13897, 14158, 14430, 14459, 14472, 14481, 14482, 14490, 14498, 14500, 14860, 14901, 14921, 15081, 15166, 15175, 79605, 15486, 15586, 15712, 15809, 15839, 15843, 15987, 16089, 16091, 16143, 80959, 77538, 17036, 17147, 30824, 17658, 19014, 19258, 84672, 21049, 21832, 21835, 22129, 62642, 22758, 22771, 23486, 23651, 23941, 23989, 24204, 24589, 24995, 25119, 25416, 25419, 83179, 25641, 81256, 25879, 26592, 26665, 26873, 26880, 27166, 28089, 28093, 29062, 33117, 34592, 34660, 35368, 36967, 37330, 38444, 38449, 38612, 38735, 56041, 39062, 39913, 40987, 40995, 41037, 41114, 41324, 41348, 41356, 41357, 41729, 41905, 42264, 42268, 42271, 42273, 42276, 42277, 43012, 44243, 44448, 44677, 44841, 44843, 44880, 44930, 45581, 45712, 46036, 46651, 46687, 46940, 47579, 47914, 48088, 48312, 48695, 49048, 49058, 49319, 49406, 86591, 50177, 51105, 51236, 51398, 51565, 51754, 51891, 52662, 52940, 52982, 52985, 53680, 53695, 53803, 53877, 54006, 54174, 54455, 54678, 54679, 54680, 54681, 54682, 54957, 55155, 55177, 55903, 57959, 58348, 58533, 59091, 59197, 59487, 59703, 59751, 59783, 59797, 59852, 59855, 82727, 60897, 60905, 60957, 61416, 61444, 83674, 61954, 62145, 62722, 62988, 63383, 63484, 63743, 63967, 64111, 64192, 64344, 64423, 64656, 64662, 64665, 64801, 65358, 66883, 67500, 85694, 67742, 67744, 67838, 68094, 68970, 69234, 69972, 70305, 70312, 70337, 70346, 70471, 70759, 71040, 71313, 72208, 72866, 72867, 73482, 73599, 73746, 74171, 74633, 75087, 75124, 76057, 76082, 76185, 81280, 76970, 77005, 77079, 78209, 78503, 79313, 79365, 79836, 80183, 80960, 80825, 15993, 21325, 9978]

var newSlugs = [81972, 17626, 86333, 81808, 87894, 89807, 89077, 84422, 89542, 89124, 83990, 2214, 86423, 86310, 81976, 83810, 84374, 84110, 88184, 86863, 85182, 83265, 91484, 17843, 82025, 81846, 84342, 82663, 82865, 82929, 83915, 87556, 85660, 84192, 85330, 90731, 10857, 85807, 82014, 92836, 85917, 82668, 82279, 89166, 80740, 18233, 4069, 86800, 86470, 86407, 86311, 86198, 87110, 14523, 82106, 89296, 82536, 82022, 82393, 88133, 82573, 82629, 82314, 10036, 88850, 84351, 82146, 84773, 85840, 82224, 82214, 91490, 82459, 87186, 82593, 81885, 89948, 91031, 98064, 98073, 85649, 85602, 82289, 83060, 83671, 82170, 93928, 94368, 84620, 82254, 89961, 84160, 83670, 13427, 13437, 16132, 91511, 98434, 8357, 94828, 16125, 88365, 88834, 8766, 83269, 8985, 88926, 93913, 16690, 76610, 92900, 82772, 85308, 83330, 11558, 90752, 89292, 90751, 99099, 90760, 91260, 89720, 86692, 89460, 93081, 82095, 88430, 90958, 92410, 8154, 88427, 89874, 88091, 88435, 92659, 90739, 98787, 99004, 88024, 88068, 90128, 70907, 99911, 85001, 92952, 12872, 87213, 87697, 88162, 89608, 14963, 88369, 86675, 88226, 88594, 88406, 88437, 81431, 88509, 88202, 88633, 14851, 88587, 88523, 83824, 92639, 92299, 88439, 94790, 88073, 84294, 84063, 82087, 83931, 86179, 90828, 86160, 84412, 82068, 84382, 82856, 91544, 82390, 88453, 82342, 82966, 88099, 82344, 93096, 93062, 85114, 88227, 80909, 83344, 85693, 95980, 91444, 84187, 82796, 90283, 83175, 91576, 58465, 84304, 81950, 84723, 90461, 93794, 83877, 90824, 85041, 82078, 82100, 91711, 91517, 86789, 33117, 88499, 93262, 93827, 85570, 90374, 82039, 98689, 84670, 89501, 85685, 86006, 91674, 87410, 81774, 89731, 86623, 87679, 87750, 87292, 87554, 82059, 85761, 90017, 90104, 89838, 90415, 90067, 90291, 82479, 85906, 83966, 89475, 89909, 82386, 82554, 89617, 89785, 90011, 14439, 90079, 85040, 89694, 91526, 86175, 90279, 81303, 81225, 89763, 85033, 89867, 90990, 85244, 92225, 100299, 89540, 100864, 100389, 87549, 87700, 85600, 81831, 87715, 87488, 92148, 84337, 85104, 92198, 82175, 91273, 84498, 54678, 54679, 54680, 54681, 54682, 83051, 91032, 55177, 88189, 15109, 87728, 24027, 84719, 82949, 84642, 78733, 101094, 87162, 80932, 101098, 82053, 82488, 25704, 92811, 82486, 85744, 85668, 91304, 90484, 81853, 90293, 90637, 82088, 82255, 85016, 82567, 83805, 82130, 89428, 90814, 88677, 88294, 88104, 82942, 90534, 81321, 87317, 99181, 90740, 99197, 84618, 87916, 82065, 80971, 91081, 87112, 87202, 89128, 84053, 89845, 87524, 90314, 91183, 15989, 87338, 87802, 83148, 90868, 82850, 85817, 91464, 91458, 83159, 95400, 93285, 88621, 81847, 87044, 87326, 13891, 85364, 85640, 83589, 82261, 91327, 81222, 82143, 86306, 83863, 91308, 89270]

var slugsWithoutDate = [553, 887, 1023, 1043, 1062, 1063, 1203, 1556, 1701, 1821, 1823, 1964, 2053, 2062, 2167, 2169, 2199, 2214, 2265, 2788, 2832, 2848, 2851, 3202, 3222, 3225, 3315, 3350, 3490, 3700, 3797, 3815, 3968, 4059, 4279, 4415, 4802, 4805, 4852, 4874, 4891, 4966, 4987, 5353, 5472, 5538, 5631, 5649, 5679, 5681, 5813, 5856, 5870, 5877, 5936, 5965, 6143, 6350, 6378, 6416, 6586, 7608, 7897, 8154, 8231, 8240, 8241, 8270, 8357, 8603, 8680, 8766, 8951, 8985, 9216, 9270, 9344, 9512, 9564, 9573, 9611, 9786, 9810, 9842, 9854, 9975, 10036, 10284, 10357, 10524, 10544, 10857, 11005, 11038, 11141, 11339, 11433, 11473, 11476, 11483, 11523, 11558, 11622, 11623, 11769, 12129, 12336, 12455, 12653, 12872, 12994, 13427, 13437, 13477, 13869, 13897, 14158, 14430, 14439, 14459, 14472, 14481, 14482, 14490, 14498, 14500, 14523, 14851, 14860, 14901, 14921, 14963, 15109, 15166, 15175, 15486, 15586, 15989, 16089, 16091, 16132, 16690, 17036, 17147, 17626, 17658, 17843, 18233, 19014, 19258, 81853, 81885, 82014, 82039, 82095, 82175, 82289, 82488, 82567, 82663, 82796, 82966, 83051, 83175, 83269, 83344, 83671, 84412, 84642, 84719, 85040, 85640, 85685, 85693, 85917, 86675, 86692, 87202, 87213, 87292, 87549, 87556, 87894, 88099, 88453, 88677, 89540, 89608, 90017, 90283, 90291, 90740, 90752, 91273, 91308, 91464, 92198, 92225, 92299, 94828, 98787, 99099, 99911]

for (var i = 0; i < oldSlugs.length; i += 1) {
    var coupleSlugs = [oldSlugs[i], newSlugs[i]]
    db.getSiblingDB("ervk_core").getCollection("supervision").find(
        {
            "slug": {
                $in: coupleSlugs
            }
        }
    ).forEach(function (supervision) {
        if (supervision.slug == newSlugs[i] && !slugsWithoutDate.includes(oldSlugs[i])) {
            db.getSiblingDB("ervk_core").getCollection("supervision").updateMany(
                {
                   "slug": oldSlugs[i],
                },
                {
                   $set: {
                        "status": "DEPRECATED",
                        "versionFinishDate": supervision.versionStartDate
                   }
                }
            )
        }
        if (supervision.slug == newSlugs[i] && slugsWithoutDate.includes(oldSlugs[i])) {
            db.getSiblingDB("ervk_core").getCollection("supervision").updateMany(
                {
                   "slug": oldSlugs[i],
                },
                {
                   $set: {
                        "status": "DEPRECATED",
                        "versionFinishDate": ISODate("2022-01-01T00:00:00.000+00:00")
                   }
                }
            )
        }
        if (supervision.slug == oldSlugs[i]) {
            db.getSiblingDB("ervk_core").getCollection("supervision").updateOne(
                {
                   "slug": newSlugs[i],
                },
                {
                   $set: {
                        "previousVersionId": supervision._id.toString()
                   }
                }
            )
        }
    });
}

Запрос для замены url по regex:

db.getSiblingDB("ervk_core").getCollection("supervision").updateMany(
    {
        $or: [
            {"authorities.wwwUrl": {$regex: "file:"}},
            {"regulations.npaList.link": {$regex: "file:"}},
            {"methods.linksToRegistry.link": {$regex: "file:"}}
        ]
    },
    {
        $set: {
             "authorities.$[authoritiesElem].wwwUrl": "",
             "regulations.npaList.$[npaListElem].link": "",
             "methods.$[methodsElem].linksToRegistry.$[linksToRegistryElem].link": ""
        }
    },
    {
        "arrayFilters": [
            {
              "authoritiesElem.wwwUrl": {
                $exists: true,
                $regex: "file:"
              }
            },
            {
              "npaListElem.link": {
                $exists: true,
                $regex: "file:"
              }
            },
            {
              "methodsElem.linksToRegistry": {
                $exists: true
              }
            },
            {
              "linksToRegistryElem.link": {
                $exists: true,
                $regex: "file:"
              }
            }
        ]
    }
);

Обновление поля number (с рекурсией и обращением к другой таблице):

var supervisionAndNumbers = new Map();
var supervisionIds = [];
var supervisionPreviousVersionIds = [];

db.getSiblingDB("ervk_core").getCollection("supervision").find(
    {
        $and: [
            {
                "number": {
                    $eq: null
                }
            },
            {
                "status": {
                    $ne: "DELETED"
                }
            }
        ]
    },
    {"_id": 1, "previousVersionId": 1, "slug": 1}
    ).sort({"slug": -1}).forEach(function (supervision) {
        supervisionIds.push(supervision._id)
        if (supervision.previousVersionId != null) {
            supervisionPreviousVersionIds.push(supervision.previousVersionId)
        } else {
            supervisionPreviousVersionIds.push(null)
        }
});

function recursiveSearch(supervisionIds, supervisionPreviousVersionIds, element, number) {
    supervisionAndNumbers.set(element, number)
    if (supervisionIds.includes(element)) {
        newElement = supervisionPreviousVersionIds[supervisionIds.indexOf(element)]
        recursiveSearch(supervisionIds, supervisionPreviousVersionIds, newElement, number)
    }
}

db.getSiblingDB("ervk_core").getCollection("counter").find(
    {
        "_id": {
            $eq: "number"
        }
    }).forEach(function (counter) {
        supervisionIds.forEach(function(id, i, supervisionIds) {
            counter.seq++
            supervisionAndNumbers.set(id, counter.seq)
            if (supervisionPreviousVersionIds[i] != null && !supervisionAndNumbers.has(supervisionPreviousVersionIds[i])) {
                 recursiveSearch(supervisionIds, supervisionPreviousVersionIds, supervisionPreviousVersionIds[i], counter.seq)
            }
        });
        db.getSiblingDB("ervk_core").getCollection("counter").updateOne(
            {
                "_id": {
                    $eq: "number"
                }
            },
            {
                $set: {
                    "seq": counter.seq
                }
            }
        )});

supervisionAndNumbers.forEach(function(number, id, supervisionAndNumbers){
    db.getSiblingDB("ervk_core").getCollection("supervision").updateOne(
    {
        "_id": {
            $eq: id
        }
    },
    {
        $set: {
            "number": number
        }
    }
)});

Обновление дат:

var oldDate = new ISODate("2021-12-31T21:00:00.000Z")
var newDate = new ISODate("2022-01-01T00:00:00.000Z")

db.getSiblingDB("ervk_core").getCollection("supervision").updateMany(
    {
        "methods.settings.date": {
            $eq: oldDate
        }
    },
    {
        $set: {
            "methods.$[methodsElem].settings.$[settingsElem].date": newDate
        }
    },
    {
        "arrayFilters": [
            {
              "methodsElem.settings": {
                $exists: true
              }
            },
            {
              "settingsElem.date": {
                $eq: oldDate
              }
            }
        ]
    }
);

Обход деревьев и переприсвоение поля number:

// Каждый узел в древовидной структуре данных должен иметь следующие свойства:
// key: Ключ узла
// value: Значение узла
// parent: родитель узла (null если его нет)
// children: массив указателей на дочерние элементы узла.

// Основные операции древовидной структуры данных:
// insert: вставляет узел как дочерний по отношению к данному родительскому узлу.
// remove: Удаляет узел и его дочерние элементы из дерева.
// find: извлекает данный узел
// preOrderTraversal: Обходит дерево путем рекурсивного обхода каждого узла, за которым следуют его дочерние элементы.
// postOrderTraversal: Обходит дерево путем рекурсивного обхода дочерних элементов каждого узла, за которым следует узел.

class Supervision {
  constructor(id, previousVersionId, slug) {
    this.id = id;
    this.previousVersionId = previousVersionId;
    this.slug = slug;
  }
}

class TreeNode {
  constructor(key, value = key, parent = null) {
    this.key = key;
    this.value = value;
    this.parent = parent;
    this.children = [];
  }

  get isLeaf() {
    return this.children.length === 0;
  }

  get hasChildren() {
    return !this.isLeaf;
  }
}

class Tree {
  constructor(key, value = key) {
    this.root = new TreeNode(key, value);
  }

  *preOrderTraversal(node = this.root) {
    yield node;
    if (node.children.length) {
      for (let child of node.children) {
        yield* this.preOrderTraversal(child);
      }
    }
  }

  *postOrderTraversal(node = this.root) {
    if (node.children.length) {
      for (let child of node.children) {
        yield* this.postOrderTraversal(child);
      }
    }
    yield node;
  }

  insert(parentNodeKey, key, value = key) {
    for (let node of this.preOrderTraversal()) {
      if (node.key === parentNodeKey) {
        node.children.push(new TreeNode(key, value, node));
        return true;
      }
    }
    return false;
  }

  remove(key) {
    for (let node of this.preOrderTraversal()) {
      const filtered = node.children.filter(c => c.key !== key);
      if (filtered.length !== node.children.length) {
        node.children = filtered;
        return true;
      }
    }
    return false;
  }

  find(key) {
    for (let node of this.preOrderTraversal()) {
      if (node.key === key) return node;
    }
    return undefined;
  }
}

var trees = [];
var supervisions = []
var startCounter = 0
var finishCounter = 0

print("Этап 1: Начало создания деревьев. Время: " + new Date())

db.getSiblingDB("ervk_core").getCollection("supervision").find(
    {
        "previousVersionId": {
            $exists: false
        }
    }).forEach(function (supervision) {

    let id = supervision._id.toString()
    let slug = supervision.slug

    trees.push(new Tree(id, new Supervision(id, null, slug)))
});

print("Этап 1: Конец создания деревьев: " + trees.length + ". Время: " + new Date())
print("Этап 2: Начало создания массива элементов. Время: " + new Date())

db.getSiblingDB("ervk_core").getCollection("supervision").find(
    {
        "previousVersionId": {
            $exists: true
        }
    },
    {
        "_id": 1,
        "previousVersionId": 1,
        "slug": 1
    }
    ).forEach(function (supervision) {

    let id = supervision._id.toString()
    let slug = supervision.slug
    let previousVersionId = supervision.previousVersionId

    supervisions.push(new Supervision(id, previousVersionId, slug))

})

print("Этап 2: Конец создания массива элементов: " + supervisions.length + ". Время: " + new Date())
print("Этап 3: Начало заполнения деревьев. Время: " + new Date())

var updatedTreesIndexes = new Set()

var counter = 0
while (true) {
    counter++
    print("Итерация: " + counter + ". Осталось элементов: " + supervisions.length + ". Время: " + new Date())
    let startCounter = supervisions.length
    trees.forEach(function(tree, index) {
        if (counter == 1 || updatedTreesIndexes.has(index)) {
            let nodes = [...tree.preOrderTraversal()].map(x => x.value)
            nodes.forEach(function(node) {
                supervision = supervisions.find(sv => sv.previousVersionId == node.id)
                if (supervision != null) {
                    tree.insert(supervision.previousVersionId, node.id, supervision)

                    indexSV = supervisions.indexOf(supervision)
                    supervisions.splice(indexSV, 1)

                    if (counter == 1 && !updatedTreesIndexes.has(index)) {
                        updatedTreesIndexes.add(index)
                    }
                }
            })
        }
    })
    let finishCounter = supervisions.length
    if (startCounter == finishCounter) {
        break
    }
}

print("Этап 3: Конец заполнения деревьев. Осталось элементов: " + supervisions.length + ". Время: " + new Date())
print("Этап 3.5: Список закольцованных элементов: " + JSON.stringify(supervisions) + ". Время: " + new Date())
print("Этап 4: Начало разрыва закольцованности среди элементов. Время: " + new Date())

counter = 0

var newTrees = []
var allTrees = []
while (true) {
    counter++
    print("Итерация: " + counter + ". Осталось элементов: " + supervisions.length + ". Время: " + new Date())
    supervisions.forEach(function(supervision, index) {
        if (index == 0) {
            let sv = new Supervision(supervision.id, null, supervision.slug, null)
            newTrees.push(new Tree(supervision.id, sv))
            supervisions.splice(index, 1)
        } else {
            let tree = newTrees.find(tr => tr.find(supervision.previousVersionId) != null)
            if (tree != null) {
                let nodes = [...tree.preOrderTraversal()].map(x => x.value)
                let node = nodes.find(n => n.id == supervision.previousVersionId)
                if (node != null) {
                    tree.insert(supervision.previousVersionId, node.id, supervision)
                    supervisions.splice(index, 1)
                }
            }
        }
    })
    if (supervisions.length == 0) {
        allTrees = trees.concat(newTrees)
        break
    }
}

print("Этап 4: Конец разрыва закольцованности среди элементов. Время: " + new Date())
print("Этап 5: Начало занесения изменений в БД. Время: " + new Date())

counter = 0
allTrees.forEach(function (tree) {
    counter++
    let treeNodes = [...tree.preOrderTraversal()].map(x => x.value)
    treeNodes.forEach(function (supervision) {
        if (supervision.previousVersionId == null) {
            db.getSiblingDB("ervk_core").getCollection("supervision").updateOne(
            {
                "slug": {
                    $eq: supervision.slug
                }
            },
            {
                $set: {
                    "number": counter
                },
                $unset: {
                    "previousVersionId": 1
                }
            })
        } else {
            db.getSiblingDB("ervk_core").getCollection("supervision").updateOne(
            {
                "slug": {
                    $eq: supervision.slug
                }
            },
            {
                $set: {
                    "number": counter,
                    "previousVersionId": supervision.previousVersionId
                }
            })
        }
    })
})

print("Этап 5: Конец занесения изменений в БД. Время: " + new Date())
print("Этап 6: Начально обновления счётчика в БД. Время: " + new Date())

db.getSiblingDB("ervk_core").getCollection("counter").updateOne(
    {
        "_id": {
            $eq: "number"
        }
    },
    {
        $set: {
            "seq": counter
        }
    }
)

print("Этап 6: Конец занесения изменений в БД")


